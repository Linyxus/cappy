module {
  extension $ext0(?: array[i32]^{cap}) {
    val show: (xs: array[i32]^{cap}) -> () ->{xs} Unit = 
      (xs: array[i32]^{cap}) => {
        () => {
          extension($ext0).foreach(xs)((x: i32) => {
            #i32println(x)
          }
          )
        }
      }
    val foreach: (xs: array[i32]^{cap}) -> (op: (_: i32) ->{cap} Unit) ->{xs} Unit = 
      (xs: array[i32]^{cap}) => {
        (op: (_: i32) ->{cap} Unit) => {
          val go: (cur: i32) ->{xs, op} Unit = 
            (cur: i32) => {
              if #i32lt(cur, #arraylen(xs)) then
                val _$2: Unit = 
                  op(#arrayget(xs, cur))
                go(#i32add(cur, 1))
              else
                ()
            }
          go(0)
        }
      }
  }
  val main: () -> Unit = 
    () => {
      val xs: array[i32]^{cap$6} = 
        #arraynew[i32](10, 0)
      val _$3: Unit = 
        extension($ext0).show(xs)()
      ()
    }
}
